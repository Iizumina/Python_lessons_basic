import re



# Задание-1:
# Матрицы в питоне реализуются в виде вложенных списков:
# Пример Дано:
matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2]]
# Выполнить поворот(транспонирование) матрицы
# Пример Результат:
# matrix_rotate = [[1, 3, 0],
#                  [0, 4, 4],
#                  [8, 1, 2]]

# Суть сложности hard: Решите задачу в одну строку
#так транспонирование
print(list(zip(*matrix)))

#так поворот
print(list(zip(*matrix[::-1])))


# Задание-2:
# Найдите наибольшее произведение пяти последовательных цифр в
# 1000-значном числе.
# Выведите произведение и индекс смещения первого числа последовательных 5-ти цифр
# Пример 1000-значного числа:

number = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
716362695618826704282524836008"""




def numberSeach(number):
    number = re.findall(r'\d', number)
    result = 0
    bias = 0
    max_step = 5

    while max_step <= len(number):
        if reduce((lambda x, y: int(x) * int(y)), number[max_step-5:max_step]) > result:
            result = reduce((lambda x, y: int(x) * int(y)), number[max_step-5:max_step])
            bias = max_step - 5
        max_step += 1
    return [result, bias]


print(numberSeach(number))






# Задание-3( Ферзи):
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били друг друга.
# Вам дана расстановка 8 ферзей на доске, определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел, каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.
# Формат передачи координат  [(1, 2), (2, 7), (3, 1), (7, 3)] где idx0 значение это ряд, idx1 значение столбец


#Функция проверяет не пересекаются-ли ферзи по столбцам или рядам
def tableRow(item_list):
    for item in item_list:
        #проверка рядов и столбов

        for itm in item_list:
            if item != itm:
                if item[0] == itm[0] or item[1] == itm[1]:
                    return True
    return False
#Функция проверяет, диагонали каждого из ферзей
def diagonal(item_list):

    for item in item_list:

        if item[0] >= item[1]:

            list_y = [y for y in range((item[0] - item[1]) + 1, 9)]
            list_x = [x for x in range(1, (9-((item[0])-(item[1]))))]
            list_xy1 = list(zip(list_y, list_x))

        # Часть первая, диагонали ферзя при y<x
        # направление диагонали от 00 до 88 выше линии
        elif item[0] < item[1]:

            list_y = [y for y in range(1, 9+(item[0]-item[1]))]
            list_x = [x for x in range(abs(item[0]-item[1] - 1), 9)]
            list_xy1 = list(zip(list_y, list_x))

        if item[0]+item[1] <= 9:
            list_y2 = [y2 for y2 in range((item[0] + item[1]) - 1, 0, -1)]
            list_xy2 = list(zip(list_y2, list_y2[::-1]))

        elif item[0]+item[1] > 9:
            list_x2 = [x2 for x2 in range(item[0] + item[1] - 9, 8)]
            list_xy2 = list(zip(list_x2[::-1], list_x2))


        #Диагонали у нас есть, теперь надо понять есть ли наши ферзи в этих диагоналях:
        if len(set(item_list) & (set(list_xy1)|set(list_xy2))) > 1:
            return True
    return False



ferzi = [(1, 2), (2, 7), (3, 1), (7, 3)]

if tableRow(ferzi) or diagonal(ferzi):
    print('YES')
else:
    print('NO')



